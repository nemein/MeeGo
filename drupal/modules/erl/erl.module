<?php

/**
 * Implementation of hook_help().
 */
function erl_help($path, $arg)
{
    // =========
    // = FIXME =
    // =========
    return '<p>Allows to redirect user to custom URL of external whitelisted domain</p>';
}

/**
 * Implementation of hook_admin()
 * Configuration settings go here
 */
function erl_admin()
{
    $form = array(
        'erl_hosts_allowed' => array(
            '#type' => 'textarea',
            '#title' => t('Allowed hosts'),
            '#default_value' => variable_get('erl_hosts_allowed', ''),
            '#description' => t("Hostnames divided by commas. Spaces are ignored"),
            '#required' => TRUE,
        ),
    );

    return system_settings_form($form);
}

/**
 * Validator for erl_admin()
 */
function erl_admin_validate($form, &$form_state)
{
    $hosts = array_map('trim', explode(',', $form_state['values']['erl_hosts_allowed']));

    $everything_is_good = true;
    foreach ($hosts as $host) {
        if (preg_match('/[\s\t:\/]/u', $host) != 0) {
            form_set_error('erl_hosts_allowed', 'This does not look like a host: "'.$host.'"');
            $everything_is_good = false;
        }
    }

    if (true === $everything_is_good) {
        // saving list of hosts as a nice string
        $form_state['values']['erl_hosts_allowed'] = implode(', ', $hosts);
    }
}

/**
 * Implementation of hook_menu()
 * registers our URLs in Drupal's urlmap
 */
function erl_menu()
{
    $items = array(
        'admin/settings/erl' => array(
            'title' => 'E.R.L. module settings',
            'description' => 'Various settings of "External Redirector after Login" module',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('erl_admin'),
            'access arguments' => array('access administration pages'),
            'type' => MENU_NORMAL_ITEM,
        ),
        'erl/login' => array(
            'title' => 'Login hook',
            'page callback' => 'erl__handle_login',
            'type' => MENU_CALLBACK
        ),
        'erl/logout' => array(
            'title' => 'Logout hook',
            'page callback' => 'erl__handle_logout',
            'type' => MENU_CALLBACK
        ),
        'erl/return' => array(
            'title' => 'Return hook',
            'page callback' => 'erl__handle_return',
            'type' => MENU_CALLBACK
        ),
    );

    return $items;
}

function erl__handle_login()
{
    // 1). get referer-url
    if (empty($_SERVER['HTTP_REFERER'])) {
        trigger_error('Referer is not available');
        return null;
    }

    $url = $_SERVER['HTTP_REFERER'];

    // 2). check that it fits in "allowed hosts"
    $allowed = _erl_get_allowed_hosts();
    $pieces = parse_url($url);

    if (!in_array($pieces['host'], $allowed)) {
        trigger_error('"'.$pieces['host'].'" is not in allowed list');
        return null;
    }

    // 3). Check if user is already logged in (get back, if so)
    if (user_is_logged_in()) {
        unset($_REQUEST['destination']);
        unset($_REQUEST['edit']['destination']);
        drupal_goto($url);
    }

    // 4). store url in session
    $_SESSION['erl_return_url'] = $url;

    // 5). redirect to user/login?destination=erl/return
    drupal_goto('user/login', 'destination=erl/return');
}

function erl__handle_logout()
{
    // 1). get referer-url
    if (empty($_SERVER['HTTP_REFERER'])) {
        trigger_error('Referer is not available');
        return null;
    }

    $url = $_SERVER['HTTP_REFERER'];

    // 2). check that it fits in "allowed hosts"
    $allowed = _erl_get_allowed_hosts();
    $pieces = parse_url($url);

    if (!in_array($pieces['host'], $allowed)) {
        trigger_error('"'.$pieces['host'].'" is not in allowed list');
        return null;
    }

    // 3). Check if user is not logged in (get back, if so)
    if (user_is_anonymous()) {
        unset($_REQUEST['destination']);
        unset($_REQUEST['edit']['destination']);
        drupal_goto($url);
    }

    // 4). store url in session
    $_SESSION['erl_return_url'] = $url;

    // 5). redirect to logout?destination=erl/return
    drupal_goto('logout', 'destination=erl/return');
}

function erl__handle_return()
{
    // 1). Check that session has url stored
    if (!isset($_SESSION['erl_return_url'])) {
        trigger_error('Return-url is not set');
        return null;
    }

    $url = $_SESSION['erl_return_url'];

    // 2). Validate that url is in whitelist (a bit of paranoia)
    $allowed = _erl_get_allowed_hosts();
    $pieces = parse_url($url);

    if (!in_array($pieces['host'], $allowed)) {
        trigger_error('"'.$pieces['host'].'" is not in allowed list');
        return null;
    }

    // 3). Redirect to url
    unset($_REQUEST['destination']);
    unset($_REQUEST['edit']['destination']);
    drupal_goto($url);
}


function _erl_get_allowed_hosts()
{
    return array_map('trim', explode(',', variable_get('erl_hosts_allowed', '')));
}
